version: 2.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             # exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               # exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Tests
          command:  |
            cd frontend
            npm i oauth-sign
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Tests
          command:  |
            cd backend
            npm i
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Audit
          command:  |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths:  [frontend/node_modules]
          key:  frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Audit
          command:  |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths:  [backend/node_modules]
          key:  backend-build


  deploy-infrastructure:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
          # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
          # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query \
            'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=instance-state-name,Values=running \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
          # exit 1
      - run:
          name: Store backend dns name to memstash
          command:  |
            var=$(aws ec2 describe-instances --query \
            'Reservations[*].Instances[*].PublicDnsName' \
            --filters Name=instance-state-name,Values=running \
            --output text)
            curl -H "Content-Type: text/plain" -H \
            "token: ce-${CIRCLE_WORKFLOW_ID}" \
            --request PUT --data "$var" https://api.memstash.io/values/backend-url
      - run:
          name: Install tar and gzip to persist to workdspace
          command:  |
            yum install tar -y
            yum install gzip -y
      - run:
          name: Check files and dir
          command:  |
            ls -a
            pwd
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "cb:58:a9:e7:b1:d0:bd:49:b6:03:e2:5c:f6:38:bf:8c"
      - run:
          name: Check files and dir
          command:  |
            ls -a
            pwd
      - attach_workspace:
          at: ~/
      - run:
          name: Check files and dir
          command:  |
            ls -a
            pwd
      - run:
          name: Configure env variables
          command:  |
            touch backend/.env
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST="$TYPEORM_HOST" >> "backend/.env"
            echo TYPEORM_PORT="$TYPEORM_PORT" >> "backend/.env"
            echo TYPEORM_USERNAME="$TYPEORM_USERNAME" >> "backend/.env"
            echo TYPEORM_PASSWORD="$TYPEORM_PASSWORD" >> "backend/.env"
            echo TYPEORM_DATABASE="$TYPEORM_DATABASE" >> "backend/.env"
            echo NODE_ENV=development >> "backend/.env"

            cat backend/.env

      - run:
          name: Install Ansible
          command: |
            apk add ansible
            echo "[defaults]" | cat > .circleci/ansible/ansible.cfg
            echo "host_key_checking = False" | cat >> .circleci/ansible/ansible.cfg
          # exit 1
      - run:
          name: Check files and dir
          command:  |
            ls -a
            pwd
            cat .circleci/ansible/inventory.txt
            cat .circleci/ansible/ansible.cfg
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
            echo "Success."
          # yes | ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
          # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Inspect files
          command:  |
            cd backend
            ls .env
            cat .env
      - run:
          name: npm install
          command:  |
            cd backend
            npm install
      - run:
          name: npm audit
          command:  |
            cd backend
            npm audit fix --audit-level=critical --force
            npm run build
      - run:
          name: Run migrations
          command: |
            touch migrations_result.txt
            npm run migrations >> ~/project/backend/migrations_result.txt
            echo 'DISPLAY CONTENTS'
            echo '*****************'
            cat migrations_result.txt
          # Your code here
          # exit 1
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            pwd
            cat ~/project/backend/migrations_result.txt

            if grep -q "has been executed successfully." ~/project/backend/migrations_result.txt
            then
              curl -H "Content-Type: text/plain" -H "token: ce-${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              echo migration_${CIRCLE_WORKFLOW_ID}
              echo "SUCCESS = 1"
            else
              echo $(curl -H "Content-Type: text/plain" -H "token: ce-${CIRCLE_WORKFLOW_ID}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID} | grep "No migrations")
              echo "migration ID" migration_${CIRCLE_WORKFLOW_ID}
              echo "FAIL = 0"
            fi

          # Your code here
          # exit 1
    #  Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Intall git
          command:  |
            yum install git -y
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -
            yum install nodejs -y
            node --version
            npm --version
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: ce-f5613828-b85d-4554-8f0d-7ba022911872" --request GET https://api.memstash.io/values/backend-url)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
          # your code here
      # - run:
      #     name: Deploy frontend objects
      #     command: |

          # your code here
      # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]